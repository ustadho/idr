/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmJournalEntryRM.java
 *
 * Created on Mar 21, 2014, 6:27:52 AM
 */

package pos.akuntansi;
    
import com.ustasoft.component.DlgLookup;
import com.ustasoft.component.GeneralFunction;
import com.ustasoft.pos.dao.jdbc.AccCoaDao;
import com.ustasoft.pos.dao.jdbc.AccJurnalDao;
import com.ustasoft.pos.domain.AccJurnal;
import com.ustasoft.pos.domain.AccJurnalDetail;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.Font;
import java.awt.KeyboardFocusManager;
import java.awt.Toolkit;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.AbstractCellEditor;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumnModel;
import javax.swing.text.JTextComponent;
import org.jdesktop.swingx.JXDatePicker;
import pos.MainForm;

/**
 *
 * @author cak-ust
 */
public class FrmJournalEntryRM extends javax.swing.JInternalFrame {
    private Connection conn;
    private GeneralFunction fn=new GeneralFunction();
    private Object srcForm;
    MyKeyListener kListener=new MyKeyListener();
    private boolean isKoreksi=false;
    private AccJurnalDao jurnalDao;
    private AccCoaDao coaDao;
    private String sJournalNo="";
    private Component aThis;
    
    /** Creates new form FrmJurnalEntryRM */
    public FrmJournalEntryRM() {
        initComponents();
        tblDetail.getColumn("Seq").setMinWidth(0);
        tblDetail.getColumn("Seq").setMaxWidth(0);
        tblDetail.getColumn("Seq").setPreferredWidth(0);
        
        tblDetail.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        tblDetail.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).
        put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "selectNextColumnCell");
        
        fn.addKeyListenerInContainer(jPanel1, kListener, txtFocusListener);
        fn.addKeyListenerInContainer(jPanel2, kListener, txtFocusListener);
        tblDetail.addKeyListener(kListener);
        jScrollPane1.addKeyListener(kListener);
        jScrollPane2.addKeyListener(kListener);
        txtKeterangan.addKeyListener(kListener);
        
        MyTableCellEditor cEditor=new MyTableCellEditor();
        tblDetail.getColumn("Debet").setCellEditor(cEditor);
        tblDetail.getColumn("Kredit").setCellEditor(cEditor);
        tblDetail.getColumn("Keterangan").setCellEditor(cEditor);
        tblDetail.getModel().addTableModelListener(new MyTableModelListener(tblDetail));
        tblDetail.setRowHeight(20);
    }

    public void setConn(Connection con){
        this.conn=con;
        fn.setConn(conn);
    }
    
    private void initForm(){
        aThis=this;
        jXDatePicker1.setFormats(MainForm.sDateFormat);
        jXDatePicker1.setDate(new Date(fn.now()));
        jurnalDao=new AccJurnalDao(conn, this);
        coaDao=new AccCoaDao(conn);
        
        tblDetail.getColumn("No").setPreferredWidth(50);
        tblDetail.getColumn("No Akun").setPreferredWidth(100);
        tblDetail.getColumn("Nama Akun").setPreferredWidth(300);
        tblDetail.getColumn("Keterangan").setPreferredWidth(150);
        if(!sJournalNo.equalsIgnoreCase("")){
            udfLoadJournalDetail();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNoBukti = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtKeterangan = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDetail = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblKredit = new javax.swing.JLabel();
        lblDebit = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Entri Jurnal");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Keterangan : ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 100, 20));

        txtNoBukti.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtNoBukti.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNoBuktiKeyReleased(evt);
            }
        });
        jPanel1.add(txtNoBukti, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 150, 20));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Jurnal Umum");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 485, 40));
        jPanel1.add(jXDatePicker1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 35, 150, -1));

        jLabel3.setText("Tanggal : ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 35, 80, 20));

        txtKeterangan.setColumns(20);
        txtKeterangan.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txtKeterangan.setRows(5);
        jScrollPane1.setViewportView(txtKeterangan);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 685, 60));

        jLabel4.setText("No. Bukti : ");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 80, 20));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 805, 129));

        tblDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "No Akun", "Nama Akun", "Debet", "Kredit", "Keterangan", "Seq"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetail.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblDetail.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblDetail);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 810, 280));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Kredit");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 115, 20));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("TOTAL");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 115, 20));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Debet");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 10, 115, 20));

        lblKredit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblKredit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblKredit.setText("0");
        lblKredit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblKredit, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 30, 115, 20));

        lblDebit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblDebit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDebit.setText("0");
        lblDebit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblDebit, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 30, 115, 20));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 115, 20));

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/cancel.png"))); // NOI18N
        btnClose.setText("Tutup");
        btnClose.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        jPanel2.add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 25, 90, -1));

        btnClear.setText("Bersihkan");
        btnClear.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jPanel2.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 25, 105, -1));

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/delete.png"))); // NOI18N
        btnDelete.setText("Hapus");
        btnDelete.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel2.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 25, 100, -1));

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/accept.png"))); // NOI18N
        btnSave.setText("Simpan");
        btnSave.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel2.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 25, 105, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 425, 810, 65));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNoBuktiKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNoBuktiKeyReleased
    }//GEN-LAST:event_txtNoBuktiKeyReleased

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        simpan();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        initForm();
    }//GEN-LAST:event_formInternalFrameOpened

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        bersihkan();
    }//GEN-LAST:event_btnClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private javax.swing.JLabel lblDebit;
    private javax.swing.JLabel lblKredit;
    private javax.swing.JTable tblDetail;
    private javax.swing.JTextArea txtKeterangan;
    private javax.swing.JTextField txtNoBukti;
    // End of variables declaration//GEN-END:variables

    private void bersihkan() {
        txtNoBukti.setText("");
        txtKeterangan.setText("");
        ((DefaultTableModel)tblDetail.getModel()).setNumRows(0);
    }

    void setSrcForm(Object aThis) {
        this.srcForm=aThis;
    }

    void setJournalNo(String no) {
        this.sJournalNo=no;
        txtNoBukti.setText(no);
    }

    private void udfLoadJournalDetail() {
        ((DefaultTableModel)tblDetail.getModel()).setNumRows(0);
        AccJurnal j= jurnalDao.getByJurnalNo(sJournalNo);
        
        if(j!=null){
            txtKeterangan.setText(j.getDescription());
            jXDatePicker1.setDate(j.getTanggal());
            for(AccJurnalDetail d: j.getListJurnal()){
                ((DefaultTableModel)tblDetail.getModel()).addRow(new Object[]{
                    tblDetail.getRowCount()+1,
                    d.getAccNo(), 
                    coaDao.cariAccCoaByID(d.getAccNo()).getAcc_name(), 
                    d.getDebit(),
                    d.getCredit(),
                    d.getMemo(), 
                    d.getSerialNo()
                });
            }
            if(tblDetail.getRowCount() > 0){
                tblDetail.setRowSelectionInterval(0, 0);
            }
        }
    }

    public class MyKeyListener extends KeyAdapter {
        @Override
        public void keyTyped(java.awt.event.KeyEvent evt) {
            
//            if(getTableSource()==null)
//                return;
            
            if (evt.getSource() instanceof JTextField &&
              ((JTextField)evt.getSource()).getName()!=null &&
              ((JTextField)evt.getSource()).getName().equalsIgnoreCase("textEditor")) {
                fn.keyTyped(evt);

           }

        }
        
        
        
        public void keyPressed(KeyEvent evt) {
            Component ct = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();
            int keyKode = evt.getKeyCode();
            switch(keyKode){
               case KeyEvent.VK_ENTER : {
                    if(!(ct instanceof JTable))                    {
                        if (!fn.isListVisible()){
                            Component c = findNextFocus();
                            if (c==null) return;
                            c.requestFocus();
                        }else{
                            fn.lstRequestFocus();
                        }
                    }
                    break;
                }
                case KeyEvent.VK_DOWN: {
                    if(!(ct.getClass().getSimpleName().equalsIgnoreCase("JTABLE")))
                        {
                            if (!fn.isListVisible()){
                                Component c = findNextFocus();
                                if (c==null) return;
                                c.requestFocus();
                            }else{
                                fn.lstRequestFocus();
                            }
                            break;
                    }
                }

                case KeyEvent.VK_UP: {
                    if(!(evt.getSource() instanceof JTable)){
                        Component c = findPrevFocus();
                        c.requestFocus();
                    }
                    break;
                }
                case KeyEvent.VK_F4:{
//                    udfClear();
                    break;
                }
                case KeyEvent.VK_F5:{
                    simpan();
                    
                    break;
                }
                case KeyEvent.VK_INSERT:{
                    udfLookupItem();
                    
                    break;
                }
//                case KeyEvent.VK_ESCAPE:{
//                    dispose();
//                    break;
//                }
                
                case KeyEvent.VK_DELETE:{
                    if(evt.getSource().equals(tblDetail) && tblDetail.getSelectedRow()>=0){
                        int iRow=tblDetail.getSelectedRow();
                        if(iRow<0)
                            return;
                        
                        ((DefaultTableModel)tblDetail.getModel()).removeRow(iRow);
                        if(tblDetail.getRowCount()<0)
                            return;
                        if(tblDetail.getRowCount()>iRow)
                            tblDetail.setRowSelectionInterval(iRow, iRow);
                        else
                            tblDetail.setRowSelectionInterval(0, 0);
                    }
                    break;

                }
                
            }
        }

//        @Override
//        public void keyReleased(KeyEvent evt){
//            if(evt.getSource().equals(txtDisc)||evt.getSource().equals(txtQty)||evt.getSource().equals(txtUnitPrice))
//                GeneralFunction.keyTyped(evt);
//        }

        public Component findNextFocus() {
            // Find focus owner
            Component c = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
            Container root = c == null ? null : c.getFocusCycleRootAncestor();

            if (root != null) {
                FocusTraversalPolicy policy = root.getFocusTraversalPolicy();
                Component nextFocus = policy.getComponentAfter(root, c);
                if (nextFocus == null) {
                    nextFocus = policy.getDefaultComponent(root);
                }
                return nextFocus;
            }
            return null;
        }

        public Component findPrevFocus() {
            // Find focus owner
            Component c = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
            Container root = c == null ? null : c.getFocusCycleRootAncestor();

            if (root != null) {
                FocusTraversalPolicy policy = root.getFocusTraversalPolicy();
                Component prevFocus = policy.getComponentBefore(root, c);
                if (prevFocus == null) {
                    prevFocus = policy.getDefaultComponent(root);
                }
                return prevFocus;
            }
            return null;
        }
    }
    
    private FocusListener txtFocusListener=new FocusListener() {
        public void focusGained(FocusEvent e) {
            if(e.getSource() instanceof JTextField || e.getSource() instanceof JFormattedTextField ){
                ((JTextField)e.getSource()).setBackground(Color.YELLOW);
                if( (e.getSource() instanceof JTextField && ((JTextField)e.getSource()).getName()!=null && ((JTextField)e.getSource()).getName().equalsIgnoreCase("textEditor"))){
                    ((JTextField)e.getSource()).setSelectionStart(0);
                    ((JTextField)e.getSource()).setSelectionEnd(((JTextField)e.getSource()).getText().length());

                }
            }else if(e.getSource() instanceof JXDatePicker){
                ((JXDatePicker)e.getSource()).setBackground(Color.YELLOW);
            }
        }


        public void focusLost(FocusEvent e) {
            if(e.getSource() instanceof  JTextField||e.getSource() instanceof JFormattedTextField){
                ((JTextField)e.getSource()).setBackground(Color.WHITE);
           }
        }
    } ;

    private void udfLookupItem(){
//        
        DlgLookup d1=new DlgLookup(JOptionPane.getFrameForComponent(this), true);
        
        String s="select *  from (" +
                "select acc_no, acc_name from acc_coa where acc_no not in(select distinct coalesce(sub_acc_of,'') from acc_coa where coalesce(sub_acc_of,'')<>'')\n" +
                "and active\n" +
                "order by acc_no  "
                + ")x " ;
        
        System.out.println(s);
        d1.setTitle("Chart of Account - Lookup");
        JTable tbl=d1.getTable();
        d1.udfLoad(conn, s, "(x.acc_no||x.acc_name)", null);
        d1.setVisible(true);

        if(d1.getKode().length()>0){
                TableColumnModel col=d1.getTable().getColumnModel();
                
                int iRow = tbl.getSelectedRow();
                

                ((DefaultTableModel)tblDetail.getModel()).addRow(new Object[]{
                    tblDetail.getRowCount()+1,
                    tbl.getValueAt(iRow, col.getColumnIndex("acc_no")).toString(),
                    tbl.getValueAt(iRow, col.getColumnIndex("acc_name")).toString(),
                    0,
                    0,
                    ""
                });

                tblDetail.setRowSelectionInterval(tblDetail.getRowCount()-1, tblDetail.getRowCount()-1);
                tblDetail.requestFocusInWindow();
                tblDetail.changeSelection(tblDetail.getRowCount()-1, tblDetail.getColumnModel().getColumnIndex("Debet"), false, false);
        }
    }
    
    public class MyTableCellEditor extends AbstractCellEditor implements TableCellEditor {

        private Toolkit toolkit;
        JTextComponent text = new JTextField() {

            @Override
            public void setFont(Font f) {
                super.setFont(new java.awt.Font("Tahoma", Font.BOLD, 11)); // NOI18N
            }
            
            protected boolean processKeyBinding(final KeyStroke ks, final KeyEvent e, final int condition, final boolean pressed) {
                if (hasFocus()) {
                    return super.processKeyBinding(ks, e, condition, pressed);
                } else {
                    this.requestFocus();

                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            processKeyBinding(ks, e, condition, pressed);
                        }
                    });
                    return true;
                }
            }
        };
        int col, row;
        private NumberFormat nf = NumberFormat.getNumberInstance(Locale.US);

        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int rowIndex, int vColIndex) {
            col = vColIndex;
            row = rowIndex;
            text.setBackground(new Color(0, 255, 204));
            text.addFocusListener(txtFocusListener);
            text.addKeyListener(kListener);
            text.setFont(table.getFont());
            text.setName("textEditor");
            text.removeKeyListener(kListener);
//           AbstractDocument doc = (AbstractDocument)text.getDocument();
//           doc.setDocumentFilter(null);
//           doc.setDocumentFilter(new FixedSizeFilter(iText));

            text.removeKeyListener(kListener);
            text.addKeyListener(kListener);

            if (isSelected) {
            }


            if (value instanceof Double || value instanceof Float || value instanceof Integer) {
//                try {
                //Daouble dVal=Double.parseDouble(value.toString().replace(",",""));
                double dVal = fn.udfGetFloat(value.toString());
                text.setText(nf.format(dVal));
//                } catch (java.text.ParseException ex) {
//                    //Logger.getLogger(DlgLookupBarang.class.getName()).log(Level.SEVERE, null, ex);
//                }
            } else {
                text.setText(value == null ? "" : value.toString());
            }
            return text;
        }

        public Object getCellEditorValue() {
            Object retVal = 0;
            try {
                if (col == tblDetail.getColumnModel().getColumnIndex("Debet")
                        || col == tblDetail.getColumnModel().getColumnIndex("Kredit")
                        ) {
                    
                    retVal = fn.udfGetDouble(((JTextField) text).getText());

                    if((Double)retVal>0) tblDetail.setValueAt(0, row, (col==3? 4:3));
                } else {
                    retVal = ((JTextField) text).getText();
                }
                return retVal;
            } catch (Exception e) {
                System.out.println(e.getMessage());
                toolkit.beep();
                retVal = 0;
            }
            return retVal;
        }
        
    }
    
    public class MyTableModelListener implements TableModelListener {
        JTable table;
        double dKredit=0, dDebet=0;

        // It is necessary to keep the table since it is not possible
        // to determine the table from the event's source
        MyTableModelListener(JTable table) {
            this.table = table;
        }

        public void tableChanged(TableModelEvent e) {
            int firstRow = e.getFirstRow();
            int lastRow = e.getLastRow();

            int mColIndex = e.getColumn();

            double dTotal=0;
            dKredit=0;
            dDebet=0;
            for (int i=0; i<tblDetail.getRowCount(); i++){
                if(tblDetail.getValueAt(i, tblDetail.getColumnModel().getColumnIndex("Debet"))!=null)
                    dDebet+=GeneralFunction.udfGetDouble(tblDetail.getValueAt(i, tblDetail.getColumnModel().getColumnIndex("Debet")));
                if(tblDetail.getValueAt(i, tblDetail.getColumnModel().getColumnIndex("Kredit"))!=null)
                    dKredit+=GeneralFunction.udfGetDouble(tblDetail.getValueAt(i, tblDetail.getColumnModel().getColumnIndex("Kredit")));
            }
            lblDebit.setText(fn.dFmt.format(dDebet));
            lblKredit.setText(fn.dFmt.format(dKredit));
        }
    }
 
    private boolean udfCekBeforeSave(){
        btnSave.requestFocus();
        if(txtNoBukti.getText().equalsIgnoreCase("")){
            JOptionPane.showMessageDialog(this, "Silahkan isi nomor bukti jurnal terlebih dulu!");
            txtNoBukti.requestFocus();
            return false;
        }
        if(fn.udfGetDouble(lblDebit.getText())==0){
            JOptionPane.showMessageDialog(this, "Total debet masih Nol!");
            tblDetail.requestFocus();
            return false;
        }
        if(fn.udfGetDouble(lblKredit.getText())==0){
            JOptionPane.showMessageDialog(this, "Total kredit masih Nol!");
            tblDetail.requestFocus();
            return false;
        }
        if(fn.udfGetDouble(lblKredit.getText())==0 && fn.udfGetDouble(lblDebit.getText())==0){
            JOptionPane.showMessageDialog(this, "Total jurnal masih Nol!");
            tblDetail.requestFocus();
            return false;
        }
        if(!isKoreksi && jurnalDao.isExistsJournalNo(txtNoBukti.getText())){
            JOptionPane.showMessageDialog(this, "No. Bukti sudah digunakan");
            txtNoBukti.requestFocus();
            return false;
        }
        return true;
        
    }
    
    private void simpan(){
        if(!udfCekBeforeSave()){
            return;
        }
        AccJurnal jurnal=new AccJurnal();
        jurnal.setJournalNo(txtNoBukti.getText());
        jurnal.setTanggal(jXDatePicker1.getDate());
        jurnal.setDescription(txtKeterangan.getText());
        jurnal.setUserIns(MainForm.sUserName);
        jurnal.setTotal(fn.udfGetDouble(lblDebit.getText()));
        jurnal.setTipe("GL");
        
        List<AccJurnalDetail> det=new ArrayList<AccJurnalDetail>();
        TableColumnModel col=tblDetail.getColumnModel();
        
        for (int i = 0; i < tblDetail.getRowCount(); i++) {
            AccJurnalDetail d=new AccJurnalDetail();
            d.setJournalNo(txtNoBukti.getText());
            d.setAccNo(tblDetail.getValueAt(i, col.getColumnIndex("No Akun")).toString());
            d.setDebit(fn.udfGetDouble(tblDetail.getValueAt(i, col.getColumnIndex("Debet"))));
            d.setCredit(fn.udfGetDouble(tblDetail.getValueAt(i, col.getColumnIndex("Kredit"))));
            d.setRate(1);
            det.add(d);
        }
        
        jurnal.setListJurnal(det);
        jurnalDao.simpanJurnal(jurnal);
        if(srcForm instanceof FrmJournalEntryRMHis){
            ((FrmJournalEntryRMHis)srcForm).udfLoadData(txtNoBukti.getText());
            this.dispose();
        }
    }
    
}
